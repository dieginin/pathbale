import{addListeners,removeListeners}from"../utils/listeners";import{getCurrentPath,navigateTo}from"../utils/paths";import{useEffect,useMemo,useState}from"react";import{match}from"path-to-regexp";export default function usePath({routes,NotFoundPage,ForbiddenPage}){const[currentPath,setCurrentPath]=useState(getCurrentPath());useEffect(()=>{const onLocationChange=()=>setCurrentPath(getCurrentPath());addListeners(onLocationChange);return()=>removeListeners(onLocationChange)},[]);const{matchedRoute,params}=useMemo(()=>{let routeParams={};const foundRoute=routes.find(({path})=>{if(path===currentPath)return true;const matchResult=match(path,{decode:decodeURIComponent});const matched=matchResult(currentPath);if(!matched)return false;routeParams=matched.params;return true});return{matchedRoute:foundRoute,params:routeParams}},[routes,currentPath]);useEffect(()=>{const guard=matchedRoute?.guard;const redirectTo=matchedRoute?.redirectTo;if(guard&&!guard()&&redirectTo){navigateTo(redirectTo)}},[matchedRoute]);const CurrentComponent=useMemo(()=>{if(!matchedRoute)return NotFoundPage;const guard=matchedRoute.guard;const redirectTo=matchedRoute.redirectTo;if(guard&&!guard()){if(redirectTo){const redirectRoute=routes.find(r=>r.path===redirectTo);return redirectRoute?.component||NotFoundPage}return ForbiddenPage}return matchedRoute.component},[matchedRoute,routes,NotFoundPage,ForbiddenPage]);return{CurrentComponent,params}}